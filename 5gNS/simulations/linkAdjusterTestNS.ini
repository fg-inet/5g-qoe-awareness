[General]
sim-time-limit=250s
num-rngs = 1
seed-0-mt = 5
output-scalar-file-append = false
record-eventlog = false

*.visualizer.*.interfaceTableVisualizer.displayInterfaceTables = true

**.tcp.typename = "Tcp"
**.udp.typename = "Udp"

**.ppp.queue.packetCapacity = 10000

# tcp general settings
**.tcp.advertisedWindow = 65535                      # in bytes, corresponds with the maximal receiver buffer capacity (Note: normally, NIC queues should be at least this size)
**.tcp.delayedAcksEnabled = false                    # delayed ACK algorithm (RFC 1122) enabled/disabled
**.tcp.nagleEnabled = true                           # Nagle's algorithm (RFC 896) enabled/disabled
**.tcp.limitedTransmitEnabled = false                # Limited Transmit algorithm (RFC 3042) enabled/disabled (can be used for TCPReno/TCPTahoe/TCPNewReno/TCPNoCongestionControl)
**.tcp.increasedIWEnabled = false                    # Increased Initial Window (RFC 3390) enabled/disabled
**.tcp.sackSupport = false                           # Selective Acknowledgment (RFC 2018, 2883, 3517) support (header option) (SACK will be enabled for a connection if both endpoints support it)
**.tcp.windowScalingSupport = false                  # Window Scale (RFC 1323) support (header option) (WS will be enabled for a connection if both endpoints support it)
**.tcp.timestampSupport = false                      # Timestamps (RFC 1323) support (header option) (TS will be enabled for a connection if both endpoints support it)
**.tcp.mss = 1452                                    # Maximum Segment Size (RFC 793) (header option)
**.tcp.tcpAlgorithmClass = "TcpReno"                 # TCPReno/TCPTahoe/TCPNewReno/TCPNoCongestionControl/DumbTCP

**.tcp.*.*.vector-recording = true
**.tcp.*.rtt.result-recording-modes = +vector
**.tcp.*.*.result-recording-modes = -vector
**.host*.app*.*.vector-recording = true
**.ppp.*xPk*.vector-recording = true
**.adjustmentModule.*.vector-recording = true
**.vector-recording = false

*.configurator.optimizeRoutes = false
*.configurator.addDefaultRoutes = true
*.configurator.addSubnetRoutes = false
*.configurator.addStaticRoutes = false

*.configurator.dumpAddresses = false
*.configurator.dumpTopology = false
*.configurator.dumpLinks = false
*.configurator.dumpRoutes = true

[Config linkAdjusterTestNS_base]
description = "All four applications - base configuration"
sim-time-limit=1600s

output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed"
*.host*.numApps = 1

# File download client
*.hostFDO[*].hasTcp = true
*.hostFDO[*].app[0].typename = "TcpFileDownloadApp"
*.hostFDO[*].app[0].localAddress = ""
*.hostFDO[*].app[0].localPort = -1 # port number to listen on
*.hostFDO[*].app[0].connectAddress = "serverFDO" # server address (may be symbolic)
*.hostFDO[*].app[0].connectPort = 1042 # port number to connect to
*.hostFDO[*].app[0].startTime = uniform(0.01s,1s) # time first session begins
*.hostFDO[*].app[0].stopTime = -1s # time of finishing sending, negative values mean forever
*.hostFDO[*].app[0].numRequestsPerSession = 1 # number of requests sent per session
*.hostFDO[*].app[0].requestLength = 800B # length of a request
*.hostFDO[*].app[0].replyLength = 2500KiB # length of a reply
*.hostFDO[*].app[0].thinkTime = 0.01s # time gap between requests
*.hostFDO[*].app[0].idleInterval = 1s # time gap between sessions
*.hostFDO[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect
*.hostFDO[*].app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished
*.hostFDO[*].app[0].stopOperationTimeout = 2s # timeout value for lifecycle stop operation

# File download server
*.serverFDO.hasTcp = true
*.serverFDO.numApps = 1
*.serverFDO.app[0].typename = "TcpGenericServerApp"
*.serverFDO.app[0].localAddress = "" # local address; may be left empty ("")
*.serverFDO.app[0].localPort = 1042 # localPort number to listen on
*.serverFDO.app[0].replyDelay = 0s #
*.serverFDO.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished
*.serverFDO.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation

# Video client
**.hostVID[*].hasTcp = true
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("")
**.hostVID[*].app[0].localPort = -1 # port number to listen on
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic)
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to
**.hostVID[*].app[0].dataTransferMode = "object"
**.hostVID[*].app[0].startTime = uniform(0.01s,1s) # time first session begins
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity
**.hostVID[*].app[0].idleInterval = 1s
**.hostVID[*].app[0].requestLength = 200B # length of a request
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" # how many kbits are required for 1 second of video for each representation (quality levels)
**.hostVID[*].app[0].manifest_size = 100000
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds
**.hostVID[*].app[0].video_duration = int(uniform(240s,320s)) # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible"

# Video server
*.serverVID.hasTcp = true
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp"
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("")
*.serverVID.app[0].localPort = 1042 # localPort number to listen on
*.serverVID.app[0].replyDelay = 0s #
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished
*.serverVID.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation

# Live Video client
**.hostLVD[*].hasTcp = true
**.hostLVD[*].app[0].typename = "TCPLiveVideoStreamCliApp"
**.hostLVD[*].app[0].localAddress = "" # may be left empty ("")
**.hostLVD[*].app[0].localPort = -1 # port number to listen on
**.hostLVD[*].app[0].connectAddress = "serverLVD" # server address (may be symbolic)
**.hostLVD[*].app[0].connectPort = 1043 # port number to connect to
**.hostLVD[*].app[0].dataTransferMode = "object"
**.hostLVD[*].app[0].startTime = uniform(0.01s,1s) # time first session begins
**.hostLVD[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity
**.hostLVD[*].app[0].idleInterval = 1s
**.hostLVD[*].app[0].requestLength = 200B # length of a request
**.hostLVD[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect
**.hostLVD[*].app[0].numRequestsPerSession = 1 # number of requests sent per session
**.hostLVD[*].app[0].thinkTime = 1s # time gap between requests
**.hostLVD[*].app[0].video_resolution = "240 360 480 720 1080" # how many kbits are required for 1 second of video for each representation (quality levels)
**.hostLVD[*].app[0].manifest_size = 100000
**.hostLVD[*].app[0].video_buffer_max_length = 6s # buffer max length in seconds
**.hostLVD[*].app[0].video_duration = int(uniform(40s,70s)) # video length in seconds
**.hostLVD[*].app[0].segment_length = 1s # video segment length in seconds
**.hostLVD[*].app[0].useFlexibleBitrate = "flexible"
**.hostLVD[*].app[0].video_type = "live"
**.hostLVD[*].app[0].delay_threshold = 4
**.hostLVD[*].app[0].speedup_rate = 1.05

# Live Video server
*.serverLVD.hasTcp = true
*.serverLVD.numApps = 1
*.serverLVD.app[0].typename = "TcpGenericServerApp"
*.serverLVD.app[0].localAddress = "" # local address; may be left empty ("")
*.serverLVD.app[0].localPort = 1043 # localPort number to listen on
*.serverLVD.app[0].replyDelay = 0s #
*.serverLVD.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished
*.serverLVD.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation

# Remote Shell Client
**.hostSSH[*].hasTcp = true
**.hostSSH[*].app[0].typename = "TcpSimpleSshAppV2"
**.hostSSH[*].app[0].localAddress = "" # local address or empty ("")
**.hostSSH[*].app[0].localPort = -1 # local port number
**.hostSSH[*].app[0].connectAddress = "serverSSH" # server address (may be symbolic)
**.hostSSH[*].app[0].connectPort = 22  # port number to connect to
**.hostSSH[*].app[0].startTime = uniform(0.01s,1s) # time first session begins
**.hostSSH[*].app[0].stopTime = -1s # time of finishing sending, negative values mean forever
**.hostSSH[*].app[0].numCommands = 1 # user types this many commands in a session
**.hostSSH[*].app[0].commandLength = 10B # commands are this many characters (plus Enter)
**.hostSSH[*].app[0].keyPressDelay = 0.05s # delay between keypresses
**.hostSSH[*].app[0].commandOutputLength = 500B # commands produce this much output
**.hostSSH[*].app[0].thinkTime = 1s # user waits this much before starting to type new command
**.hostSSH[*].app[0].idleInterval = 1s # time gap between sessions
**.hostSSH[*].app[0].reconnectInterval = 1s # if connection breaks, user waits this much before trying to reconnect
**.hostSSH[*].app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished
**.hostSSH[*].app[0].stopOperationTimeout = 2s # timeout value for lifecycle stop operation

# SSH server
*.serverSSH.hasTcp = true
*.serverSSH.numApps = 1
*.serverSSH.app[*].typename = "TcpGenericServerApp"
*.serverSSH.app[*].localAddress = "" # local address; may be left empty ("")
*.serverSSH.app[*].localPort = 22 # localPort number to listen on
*.serverSSH.app[*].replyDelay = 0s #
*.serverSSH.app[*].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished
*.serverSSH.app[*].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation

# VoIP receiver
**.hostVIP[*].hasUdp = true
**.hostVIP[*].app[0].typename = "SimpleVoipReceiver"
**.hostVIP[*].app[0].localPort = 2000
**.hostVIP[*].app[0].emodelIe = 5 # Equipment impairment factor
**.hostVIP[*].app[0].emodelBpl = 10 # Packet-loss robustness factor
**.hostVIP[*].app[0].emodelA = 5 # Advantage factor
**.hostVIP[*].app[0].emodelRo = 93.2 # Basic signal-to-noise ratio
**.hostVIP[*].app[0].playoutDelay = 10ms # initial delay for beginning playout after receiving the first packet
**.hostVIP[*].app[0].adaptivePlayoutDelay = false # if true, adjust playoutDelay after each talkspurt
**.hostVIP[*].app[0].bufferSpace = 20 # buffer size in packets
**.hostVIP[*].app[0].mosSpareTime = 1s # spare time before calculating MOS (after calculated playout time of last packet)

# VoIP sender
**.serverVIP.hasUdp = true
**.serverVIP.numApps = nVIP
**.serverVIP.app[*].typename = "SimpleVoipSender"
**.serverVIP.app[*].localPort = -1
**.serverVIP.app[*].destPort = 2000
**.serverVIP.app[*].destAddress = "hostVIP[" + string(index()) + "]"
**.serverVIP.app[*].talkPacketSize = 40B # size of talk packets in bytes
**.serverVIP.app[*].talkspurtDuration = weibull(1.423s, 0.824s)
**.serverVIP.app[*].silenceDuration = weibull(0.899s, 1.089s)
**.serverVIP.app[*].packetizationInterval = 1ms # interval between sending voice packets
**.serverVIP.app[*].startTime = uniform(0.01s,1s) # time of start sending
**.serverVIP.app[*].stopTime = -1s # time of end of sending, -1 means forever


#############################################################################################################
#############################################################################################################
##																										   ##
##																										   ##
##        Configurations with 2 slices - one for delay and one for bandwidth sensitive applications        ##
##																										   ##
##																										   ##
#############################################################################################################
#############################################################################################################


# Base configs for 2 slices with simple two links between routers
[Config linkAdjusterTestNS_2sli_LVD-DES_base]
description = "Simple two slices base"
extends = linkAdjusterTestNS_base
network = linkAdjusterTestNS_2sli

# Links for "Network Slicing" configuration - network resources allocated to slices
*.configurator.config = xmldoc("configs/routing_2sli/routerConfigNS_2sli_LVD-DES.xml")
*.adjustmentModule.adjustmentInterval = 20s
*.adjustmentModule.numSlices = 2

[Config linkAdjusterTestNS_2sli_LVD-BWS_base]
description = "Simple two slices base"
extends = linkAdjusterTestNS_base
network = linkAdjusterTestNS_2sli

# Links for "Network Slicing" configuration - network resources allocated to slices
*.configurator.config = xmldoc("configs/routing_2sli/routerConfigNS_2sli_LVD-BWS.xml")
*.adjustmentModule.adjustmentInterval = 20s
*.adjustmentModule.numSlices = 2


## Base configs for 2 slices with two links between routers and an additional singular link
#[Config linkAdjusterTestNS_2sliSingle_LVD-DES_base]
#description = "Extended two slices base"
#extends = linkAdjusterTestNS_base
#network = linkAdjusterTestNS_2sliSingle
#
## Links for "Network Slicing" configuration - network resources allocated to slices
#*.configurator.config = xmldoc("configs/routing_2sli/routerConfigNS_2sliSingle_LVD-DES.xml")
#
#[Config linkAdjusterTestNS_2sliSingle_LVD-BWS_base]
#description = "Extended two slices base"
#extends = linkAdjusterTestNS_base
#network = linkAdjusterTestNS_2sliSingle
#
## Links for "Network Slicing" configuration - network resources allocated to slices
#*.configurator.config = xmldoc("configs/routing_2sli/routerConfigNS_2sliSingle_LVD-BWS.xml")
#
#
#
## Base configs for 2 slices with two links between routers, an additional single link and again two links
#[Config linkAdjusterTestNS_2sliSingle2sli_LVD-DES_base]
#description = "Extended two slices base"
#extends = linkAdjusterTestNS_base
#network = linkAdjusterTestNS_2sliSingle2sli
#
## Links for "Network Slicing" configuration - network resources allocated to slices
#*.configurator.config = xmldoc("configs/routing_2sli/routerConfigNS_2sliSingle2sli_LVD-DES.xml")
#
#[Config linkAdjusterTestNS_2sliSingle2sli_LVD-BWS_base]
#description = "Extended two slices base"
#extends = linkAdjusterTestNS_base
#network = linkAdjusterTestNS_2sliSingle2sli
#
## Links for "Network Slicing" configuration - network resources allocated to slices
#*.configurator.config = xmldoc("configs/routing_2sli/routerConfigNS_2sliSingle2sli_LVD-BWS.xml")
#
#
#
## Base configs for 2 slices where the up and downlink routes are separated and each has 2 links followed by a singular link
#[Config linkAdjusterTestNS_2sliDouble_LVD-DES_base]
#description = "Extended two slices base"
#extends = linkAdjusterTestNS_base
#network = linkAdjusterTestNS_2sliDouble
#
## Links for "Network Slicing" configuration - network resources allocated to slices
#*.configurator.config = xmldoc("configs/routing_2sli/routerConfigNS_2sliDouble_LVD-DES.xml")
#
#[Config linkAdjusterTestNS_2sliDouble_LVD-BWS_base]
#description = "Extended two slices base"
#extends = linkAdjusterTestNS_base
#network = linkAdjusterTestNS_2sliDouble
#
## Links for "Network Slicing" configuration - network resources allocated to slices
#*.configurator.config = xmldoc("configs/routing_2sli/routerConfigNS_2sliDouble_LVD-BWS.xml")




[Config linkAdjusterTestNS_2sli_LVD-DES]
description = "Test with two dedicated resource links - BWS and DES. LVD considered as DES"
extends = linkAdjusterTestNS_2sli_LVD-DES_base

*.nVID = ${numEachApp=5} # Number of video clients
*.nLVD = ${numEachApp} # Number of live video client
*.nFDO = ${numEachApp} # Number of file download clients
*.nSSH = ${numEachApp} # Number of SSH clients
*.nVIP = ${numEachApp} # Number of VoIP clients

# Links for "Network Slicing" configuration - network resources initially allocated to slices
**.connBWS.datarate = 60Mbps
**.connDES.datarate = 40Mbps

[Config linkAdjusterTestNS_2sli_LVD-BWS]
description = "Test with two dedicated resource links - BWS and DES. LVD considered as BWS"
extends = linkAdjusterTestNS_2sli_LVD-BWS_base

*.nVID = ${numEachApp=20,50} # Number of video clients
*.nLVD = ${numEachApp} # Number of live video client
*.nFDO = ${numEachApp} # Number of file download clients
*.nSSH = ${numEachApp} # Number of SSH clients
*.nVIP = ${numEachApp} # Number of VoIP clients

# Links for "Network Slicing" configuration - network resources initially allocated to slices
**.connBWS.datarate = 80Mbps
**.connDES.datarate = 20Mbps




#[Config linkAdjusterTestNS_2sliSingle_LVD-DES]
#description = "Test with two dedicated resource links - BWS and DES - and an additional single link between router1 and router2. LVD considered as DES"
#extends = linkAdjusterTestNS_2sliSingle_LVD-DES_base
#
#*.nVID = ${numEachApp=50} # Number of video clients
#*.nLVD = ${numEachApp} # Number of live video client
#*.nFDO = ${numEachApp} # Number of file download clients
#*.nSSH = ${numEachApp} # Number of SSH clients
#*.nVIP = ${numEachApp} # Number of VoIP clients
#
## Links for "Network Slicing" configuration - network resources allocated to slices
#**.connBWS.datarate = 60Mbps
#**.connDES.datarate = 40Mbps
#
#[Config linkAdjusterTestNS_2sliSingle_LVD-BWS]
#description = "Test with two dedicated resource links - BWS and DES - and an additional single link between router1 and router2. LVD considered as BWS"
#extends = linkAdjusterTestNS_2sliSingle_LVD-BWS_base
#
#*.nVID = ${numEachApp=50} # Number of video clients
#*.nLVD = ${numEachApp} # Number of live video client
#*.nFDO = ${numEachApp} # Number of file download clients
#*.nSSH = ${numEachApp} # Number of SSH clients
#*.nVIP = ${numEachApp} # Number of VoIP clients
#
## Links for "Network Slicing" configuration - network resources allocated to slices
#**.connBWS.datarate = 80Mbps
#**.connDES.datarate = 20Mbps
#
#
#
#
#[Config linkAdjusterTestNS_2sliSingle2sli_LVD-DES]
#description = "Test with 2 links between router0 and router1, an additional single link between router1 and router2 and 2 links between router2 and router3"
#extends = linkAdjusterTestNS_2sliSingle2sli_LVD-DES_base
#
#*.nVID = ${numEachApp=50} # Number of video clients
#*.nLVD = ${numEachApp} # Number of live video client
#*.nFDO = ${numEachApp} # Number of file download clients
#*.nSSH = ${numEachApp} # Number of SSH clients
#*.nVIP = ${numEachApp} # Number of VoIP clients
#
## Links for "Network Slicing" configuration - network resources allocated to slices
#**.connBWS1.datarate = 60Mbps
#**.connDES1.datarate = 40Mbps
#
#**.connBWS2.datarate = 60Mbps
#**.connDES2.datarate = 40Mbps
#
#[Config linkAdjusterTestNS_2sliSingle2sli_LVD-BWS]
#description = "Test with 2 links between router0 and router1, an additional single link between router1 and router2 and 2 links between router2 and router3"
#extends = linkAdjusterTestNS_2sliSingle2sli_LVD-BWS_base
#
#*.nVID = ${numEachApp=50} # Number of video clients
#*.nLVD = ${numEachApp} # Number of live video client
#*.nFDO = ${numEachApp} # Number of file download clients
#*.nSSH = ${numEachApp} # Number of SSH clients
#*.nVIP = ${numEachApp} # Number of VoIP clients
#
## Links for "Network Slicing" configuration - network resources allocated to slices
#**.connBWS1.datarate = 80Mbps
#**.connDES1.datarate = 20Mbps
#
#**.connBWS2.datarate = 80Mbps
#**.connDES2.datarate = 20Mbps
#
#
#
#
#[Config linkAdjusterTestNS_2sliDouble_LVD-DES]
#description = "Test with 2 links between router0 and router1, an additional single link between router1 and router2 and 2 links between router2 and router3"
#extends = linkAdjusterTestNS_2sliDouble_LVD-DES_base
#
#*.nVID = ${numEachApp=50} # Number of video clients
#*.nLVD = ${numEachApp} # Number of live video client
#*.nFDO = ${numEachApp} # Number of file download clients
#*.nSSH = ${numEachApp} # Number of SSH clients
#*.nVIP = ${numEachApp} # Number of VoIP clients
#
## Links for "Network Slicing" configuration - network resources allocated to slices
#**.connBWS1.datarate = 60Mbps
#**.connDES1.datarate = 40Mbps
#
#**.connBWS2.datarate = 60Mbps
#**.connDES2.datarate = 40Mbps
#
#[Config linkAdjusterTestNS_2sliDouble_LVD-BWS]
#description = "Test with 2 links between router0 and router1, an additional single link between router1 and router2 and 2 links between router2 and router3"
#extends = linkAdjusterTestNS_2sliDouble_LVD-BWS_base
#
#*.nVID = ${numEachApp=50} # Number of video clients
#*.nLVD = ${numEachApp} # Number of live video client
#*.nFDO = ${numEachApp} # Number of file download clients
#*.nSSH = ${numEachApp} # Number of SSH clients
#*.nVIP = ${numEachApp} # Number of VoIP clients
#
## Links for "Network Slicing" configuration - network resources allocated to slices
#**.connBWS1.datarate = 80Mbps
#**.connDES1.datarate = 20Mbps
#
#**.connBWS2.datarate = 80Mbps
#**.connDES2.datarate = 20Mbps
#
#
############################################################################
############################################################################
###																		 ##
###																		 ##
###        Configurations with 5 slices - one per application type        ##
###																		 ##
###																		 ##
############################################################################
############################################################################
#
#
## Base configs for 5 slices with simple two links between routers
#[Config linkAdjusterTestNS_5sli_base]
#description = "Simple five slices base"
#extends = linkAdjusterTestNS_base
#network = linkAdjusterTestNS_5sli
#
## Links for "Network Slicing" configuration - network resources allocated to slices
#*.configurator.config = xmldoc("configs/routing_5sli/routerConfigNS_5sli.xml")
#
#
#[Config linkAdjusterTestNS_5sliSingle_base]
#description = "Simple five slices base"
#extends = linkAdjusterTestNS_base
#network = linkAdjusterTestNS_5sliSingle
#
## Links for "Network Slicing" configuration - network resources allocated to slices
#*.configurator.config = xmldoc("configs/routing_5sli/routerConfigNS_5sliSingle.xml")
#
#
#[Config linkAdjusterTestNS_5sliSingle5sli_base]
#description = "Simple five slices base"
#extends = linkAdjusterTestNS_base
#network = linkAdjusterTestNS_5sliSingle5sli
#
## Links for "Network Slicing" configuration - network resources allocated to slices
#*.configurator.config = xmldoc("configs/routing_5sli/routerConfigNS_5sliSingle5sli.xml")
#
#
#[Config linkAdjusterTestNS_5sliDouble_base]
#description = "Simple five slices base"
#extends = linkAdjusterTestNS_base
#network = linkAdjusterTestNS_5sliDouble
#
## Links for "Network Slicing" configuration - network resources allocated to slices
#*.configurator.config = xmldoc("configs/routing_5sli/routerConfigNS_5sliDouble.xml")
#
#
#
#
#[Config linkAdjusterTestNS_5sli]
#description = "Test with two dedicated resource links - BWS and DES. LVD considered as DES"
#extends = linkAdjusterTestNS_5sli_base
#
#*.nVID = ${numEachApp=50} # Number of video clients
#*.nLVD = ${numEachApp} # Number of live video client
#*.nFDO = ${numEachApp} # Number of file download clients
#*.nSSH = ${numEachApp} # Number of SSH clients
#*.nVIP = ${numEachApp} # Number of VoIP clients
#
## Links for "Network Slicing" configuration - network resources allocated to slices
#**.connVID.datarate = 30Mbps
#**.connLVD.datarate = 25Mbps
#**.connFDO.datarate = 25Mbps
#**.connSSH.datarate = 5Mbps
#**.connVIP.datarate = 15Mbps
#
#
#[Config linkAdjusterTestNS_5sliSingle]
#description = "Test with two dedicated resource links - BWS and DES. LVD considered as DES"
#extends = linkAdjusterTestNS_5sliSingle_base
#
#*.nVID = ${numEachApp=50} # Number of video clients
#*.nLVD = ${numEachApp} # Number of live video client
#*.nFDO = ${numEachApp} # Number of file download clients
#*.nSSH = ${numEachApp} # Number of SSH clients
#*.nVIP = ${numEachApp} # Number of VoIP clients
#
## Links for "Network Slicing" configuration - network resources allocated to slices
#**.connVID.datarate = 30Mbps
#**.connLVD.datarate = 25Mbps
#**.connFDO.datarate = 25Mbps
#**.connSSH.datarate = 5Mbps
#**.connVIP.datarate = 15Mbps
#
#
#[Config linkAdjusterTestNS_5sliSingle5sli]
#description = "Test with two dedicated resource links - BWS and DES. LVD considered as DES"
#extends = linkAdjusterTestNS_5sliSingle5sli_base
#
#*.nVID = ${numEachApp=50} # Number of video clients
#*.nLVD = ${numEachApp} # Number of live video client
#*.nFDO = ${numEachApp} # Number of file download clients
#*.nSSH = ${numEachApp} # Number of SSH clients
#*.nVIP = ${numEachApp} # Number of VoIP clients
#
## Links for "Network Slicing" configuration - network resources allocated to slices
#**.connVID1.datarate = 30Mbps
#**.connLVD1.datarate = 25Mbps
#**.connFDO1.datarate = 25Mbps
#**.connSSH1.datarate = 5Mbps
#**.connVIP1.datarate = 15Mbps
#
#**.connVID2.datarate = 30Mbps
#**.connLVD2.datarate = 25Mbps
#**.connFDO2.datarate = 25Mbps
#**.connSSH2.datarate = 5Mbps
#**.connVIP2.datarate = 15Mbps
#
#
#[Config linkAdjusterTestNS_5sliDouble]
#description = "Test with two dedicated resource links - BWS and DES. LVD considered as DES"
#extends = linkAdjusterTestNS_5sliDouble_base
#
#*.nVID = ${numEachApp=50} # Number of video clients
#*.nLVD = ${numEachApp} # Number of live video client
#*.nFDO = ${numEachApp} # Number of file download clients
#*.nSSH = ${numEachApp} # Number of SSH clients
#*.nVIP = ${numEachApp} # Number of VoIP clients
#
## Links for "Network Slicing" configuration - network resources allocated to slices
#**.connVID1.datarate = 30Mbps
#**.connLVD1.datarate = 25Mbps
#**.connFDO1.datarate = 25Mbps
#**.connSSH1.datarate = 5Mbps
#**.connVIP1.datarate = 15Mbps
#
#**.connVID2.datarate = 30Mbps
#**.connLVD2.datarate = 25Mbps
#**.connFDO2.datarate = 25Mbps
#**.connSSH2.datarate = 5Mbps
#**.connVIP2.datarate = 15Mbps
